# == Notes ==
# This CI/CD pipeline uses a GitLab-provided template for merge request workflows.
# GitLab automatically passes artifacts from earlier stages to subsequent ones.
#
# Secret Variables:
# - Define required secret variables at: https://gitlab.data.bas.ac.uk/MAGIC/SIIS/-/settings/ci_cd
# - Variables are organized as KEY: "value" pairs. Sensitive values are represented as "[Sensitive]".
#
# Rules and Tags:
# - Most jobs use 'changes' rules to trigger only when specific components are updated.
# - For tagged releases, 'changes' rules always evaluate to true to ensure full pipeline execution.
# - Documentation: https://docs.gitlab.com/ee/ci/yaml/README.html#ruleschanges

# == Includes ==
include:
- template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'

# == Global Settings ==
stages:
  - üß™ test          # Linting and code quality checks
  - üèó build         # Build applications and assets
  - üì¶ package       # Package build artifacts for deployment
  - üöö distribute    # Upload packages to the GitLab package registry

variables:
  DEPLOY_GROUP: "magic"
  DEPLOY_ENV: "staging"
  DEPLOY_SSH_PRIVATE_KEY: "id_ed25519.pem"
  DEPLOY_ANSIBLE_BRANCH: "siis-app-deployment"
  DEPLOY_ANSIBLE_VENV: "/tmp/.venv/ansible"
  DEPLOY_ANSIBLE_ROOT_PATH: "/tmp/ansible"
  SIIS_VERSION_1_APP_PREFIX: "v1"
  SIIS_VERSION_2_APP_PREFIX: "v2"
  SIIS_STAGE_ENV: "stage"
  SIIS_PROD_ENV: "prod"

# == Jobs ==

# Linting and code quality checks
black:
  stage: üß™ test
  image:
    name: docker-registry.data.bas.ac.uk/magic/siis/api:latest
    entrypoint: [""]
  script:
    - "black --check api/"
  needs: []  # This job doesn't depend on any previous jobs
  rules:
    - changes:
        - 'api/**/*.*'  # Run only if files in the 'api' directory are changed

# Build stage for App (Stage environment)
build-app-stage:
  stage: üèó build
  image:
    name: docker-registry.data.bas.ac.uk/magic/siis/app:latest
    entrypoint: [""]
  variables:
    SERVICE_API_ENDPOINT: https://api.siis.sda-stage.bas.ac.uk
    SERVICE_API_KV_ENDPOINT: http://10.70.1.145:32003/kv
    SERVICE_API_OGC_ENDPOINT: https://geoserver.siis.sda-stage.bas.ac.uk
  before_script:
    - 'cd app'
    - 'yarn install'  # Install dependencies
  script:
    - "yarn build"  # Build the app
  artifacts:
    paths:
      - app/dist  # Store the build output
    expire_in: 1 month
  rules:
    - changes:
        - 'app/**/*.*'  # Trigger only when 'app' directory files change

# Build stage for App (Production environment)
build-app-prod:
  extends: build-app-stage
  rules:
    - changes:
        - 'app/**/*.*'
      if: $CI_COMMIT_TAG  # Trigger only on tagged commits for production builds

# Build stage for App v2 (Stage environment)
build-app-v2-stage:
  stage: üèó build
  image: node:20-alpine
  variables:
    VITE_SERVICE_API_ENDPOINT: https://api.siis.sda-stage.bas.ac.uk
    VITE_SERVICE_API_KV_ENDPOINT: http://10.70.1.145:32003/kv
    VITE_SERVICE_API_OGC_ENDPOINT: https://geoserver.siis.sda-stage.bas.ac.uk
  before_script:
    - 'cd app_v2'
    - 'npm install'  # Install dependencies
  script:
    - "npm run build"  # Build the app
  artifacts:
    paths:
      - app_v2/dist
    expire_in: 1 month
  rules:
    - changes:
        - 'app_v2/**/*.*'  # Trigger only when 'app_v2' directory files change

# Build stage for App v2 (Production environment)
build-app-v2-prod:
  extends: build-app-v2-stage
  rules:
    - changes:
        - 'app_v2/**/*.*'
      if: $CI_COMMIT_TAG  # Trigger only on tagged commits for production builds


# Package template for App v1
.package-app-template:
  stage: üì¶ package
  image:
    name: alpine:latest
    entrypoint: [""]
  before_script:
    - "apk add --no-cache zip"  # Install zip utility
    - "mkdir -p ./app/dist-pkgs/"  # Create directory for packaged files
    - "cd ./app/dist/"  # Navigate to the build output directory
  artifacts:
    paths:
      - app/dist-pkgs  # Store the packaged files
    expire_in: 1 month

# Package stage for App v1 (Stage environment)
package-app-stage:
  extends: .package-app-template
  script:
    - "zip ../dist-pkgs/app-stage.zip *"  # Package all files in the directory
  needs:
    - job: build-app-stage
      artifacts: true  # Ensure build artifacts are available
  rules:
    - changes:
      - 'app/**/*.*'  # Trigger only when 'app' directory files change

# Package stage for App v1 (Production environment)
package-app-prod:
  extends: .package-app-template
  script:
    - "zip ../dist-pkgs/app-prod.zip *"  # Package all files in the directory
  needs:
    - job: build-app-prod
      artifacts: true  # Ensure build artifacts are available
  rules:
    - changes:
        - 'app/**/*.*'  # Trigger only when 'app' directory files change
      if: $CI_COMMIT_TAG  # Run only for tagged commits (production releases)

# Package template for App v2
.package-app-v2-template:
  stage: üì¶ package
  image:
    name: alpine:latest
    entrypoint: [""]
  before_script:
    - "apk add --no-cache zip"  # Install zip utility
    - "mkdir -p ./app_v2/dist-pkgs/"  # Create directory for packaged files
    - "cd ./app_v2/dist/"  # Navigate to the build output directory
  artifacts:
    paths:
      - app_v2/dist-pkgs  # Store the packaged files
    expire_in: 1 month

# Package stage for App v2 (Stage environment)
package-app-v2-stage:
  extends: .package-app-v2-template
  script:
    - "zip -r ../dist-pkgs/app-v2-stage.zip ."  # Package all files recursively
  needs:
    - job: build-app-v2-stage
      artifacts: true  # Ensure build artifacts are available
  rules:
    - changes:
      - 'app_v2/**/*.*'  # Trigger only when 'app_v2' directory files change

# Package stage for App v2 (Production environment)
package-app-v2-prod:
  extends: .package-app-v2-template
  script:
    - "zip -r ../dist-pkgs/app-v2-prod.zip ."  # Package all files recursively
  needs:
    - job: build-app-v2-prod
      artifacts: true  # Ensure build artifacts are available
  rules:
    - changes:
        - 'app_v2/**/*.*'  # Trigger only when 'app_v2' directory files change
      if: $CI_COMMIT_TAG  # Run only for tagged commits (production releases)

distribute-app:
  stage: üöö distribute
  image:
    name: curlimages/curl:latest
    entrypoint: [""]
  variables:
    SIIS_VERSION: ${CI_COMMIT_TAG#v}  # Remove 'v' prefix from tag
  script:
    # First handle v1 packages
    - |
      # Stage environment
      SIIS_ENV=${SIIS_STAGE_ENV}
      curl --fail \
        --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --upload-file ./app/dist-pkgs/app-stage.zip \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${SIIS_VERSION_1_APP_PREFIX}/${SIIS_VERSION}/${SIIS_VERSION_1_APP_PREFIX}-${SIIS_VERSION}-${SIIS_ENV}.zip"
      
      # Production environment
      SIIS_ENV=${SIIS_PROD_ENV}
      curl --fail \
        --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --upload-file ./app/dist-pkgs/app-prod.zip \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${SIIS_VERSION_1_APP_PREFIX}/${SIIS_VERSION}/${SIIS_VERSION_1_APP_PREFIX}-${SIIS_VERSION}-${SIIS_ENV}.zip"

    # Then handle v2 packages
    - |
      # Stage environment
      SIIS_ENV=${SIIS_STAGE_ENV}
      curl --fail \
        --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --upload-file ./app_v2/dist-pkgs/app-v2-stage.zip \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${SIIS_VERSION_2_APP_PREFIX}/${SIIS_VERSION}/${SIIS_VERSION_2_APP_PREFIX}-${SIIS_VERSION}-${SIIS_ENV}.zip"
      
      # Production environment
      SIIS_ENV=${SIIS_PROD_ENV}
      curl --fail \
        --header "JOB-TOKEN: $CI_JOB_TOKEN" \
        --upload-file ./app_v2/dist-pkgs/app-v2-prod.zip \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${SIIS_VERSION_2_APP_PREFIX}/${SIIS_VERSION}/${SIIS_VERSION_2_APP_PREFIX}-${SIIS_VERSION}-${SIIS_ENV}.zip"
  needs:
    - job: package-app-stage
      artifacts: true
    - job: package-app-prod
      artifacts: true
    - job: package-app-v2-stage
      artifacts: true
    - job: package-app-v2-prod
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG

# Deploy stage
deploy-app:
  stage: üöÄ deploy
  needs:
    - job: publish
  image: python:3.6-slim
  before_script:
    - apt-get update

    # clone BAS IT ansible repo
    - apt-get install -y git
    - git clone --branch $DEPLOY_ANSIBLE_BRANCH https://gitlab-ci-token:$CI_JOB_TOKEN@$DEPLOY_ANSIBLE_REPO $DEPLOY_ANSIBLE_ROOT_PATH
    
    # setup Ansible
    - apt-get install -y ssh build-essential
    - python -m venv $DEPLOY_ANSIBLE_VENV
    - $DEPLOY_ANSIBLE_VENV/bin/python -m pip install --upgrade pip
    - $DEPLOY_ANSIBLE_VENV/bin/python -m pip install -r $DEPLOY_ANSIBLE_ROOT_PATH/requirements.txt

    # setup 1Password CLI
    - apt-get install -y curl unzip
    - curl -sSfo op.zip https://cache.agilebits.com/dist/1P/op2/pkg/v2.28.0/op_linux_amd64_v2.28.0.zip
    - unzip -od /usr/local/bin/ op.zip

    # setup SSH
    - apt-get install -y ssh
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - op read --out-file ~/.ssh/$DEPLOY_SSH_PRIVATE_KEY "op://Infrastructure/bas-magic-siis-deploy-key/private key?ssh-format=openssh"
    - eval $(ssh-agent -s)
    - chmod 400 ~/.ssh/$DEPLOY_SSH_PRIVATE_KEY
    - ssh-add ~/.ssh/$DEPLOY_SSH_PRIVATE_KEY

    # setup variables
    - export DEPLOY_APP_VERSION=$(echo $CI_COMMIT_TAG | sed 's/^v//')  # Remove 'v' prefix from tag

    # setup path
    - export PATH=$DEPLOY_ANSIBLE_VENV/bin:$PATH
  script:
    - cd $DEPLOY_ANSIBLE_ROOT_PATH
    - ansible siis -m ping -i inventory/$DEPLOY_GROUP/$DEPLOY_ENV
    # - ansible-playbook -v -b -e env=$DEPLOY_ENV -e group=$DEPLOY_GROUP -e project=$DEPLOY_ANSIBLE_ROOT_PATH -e siis_app_prefix=$SIIS_VERSION_1_APP_PREFIX -e siis_version=$DEPLOY_APP_VERSION -e siis_env=$SIIS_STAGE_ENV -i inventory/$DEPLOY_GROUP/$DEPLOY_ENV playbooks/$DEPLOY_GROUP/siis-app.yml
    - ansible-playbook -v -b -e env=$DEPLOY_ENV -e group=$DEPLOY_GROUP -e project=$DEPLOY_ANSIBLE_ROOT_PATH -e siis_app_prefix=$SIIS_VERSION_2_APP_PREFIX -e siis_version=$DEPLOY_APP_VERSION -e siis_env=$SIIS_STAGE_ENV -i inventory/$DEPLOY_GROUP/$DEPLOY_ENV playbooks/$DEPLOY_GROUP/siis-app.yml
  rules:
    - if: $CI_COMMIT_TAG



