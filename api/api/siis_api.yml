openapi: "3.0.0"

info:
  description: Open API v3 file for SIIS API
  version: "0.8"
  title: SIIS API

servers:
  - url: http://10.70.1.145:32002

# Paths supported by the server application
paths:

  /products:
    get:
      summary: Read the entire set of product definitions, sorted by SIIS product code
      operationId: product.read_all
      tags:
        - Products
      description: Read the entire set of product definitions, sorted by SIIS product code
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
        - name: hemi
          in: query
          description: request hemisphere (N/S) specific products only
          required: false
          schema:
            type: string
            enum: [N, n, S, s]
      responses:
        '200':
          description: Successfully read product set operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/products"

  /products/{code}:
    get:
      summary: Read one product definition
      operationId: product.read_one
      tags:
        - Products
      description: Read one product definition
      parameters:
        - name: code
          in: path
          description: SIIS product code of the product to get
          schema:
            type: string
          required: True
      responses:
        '200':
          description: Successfully read product from product data operation
          content:
            application/json:          
              schema:
                $ref: "#/components/schemas/products"

  /products/{code}/granules:
    get:
      summary: Read all granules belonging to same product
      operationId: product.read_one_granules
      tags:
        - Products
        - Granules
      description: Read all granules belonging to same product
      parameters:
        - name: code
          in: path
          description: SIIS product code of the granules to get
          schema:
            type: string
          required: true
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
        - name: maxage
          in: query
          description: maximum age of granule since generation/acquisiton in hours
          required: false
          schema:
            type: number
        - name: date
          in: query
          description: filters returned granules by acquisition date (YYYY-MM-DD)
          required: false
          schema:
            type: string
        - name: date_range
          in: query
          description: filters returned granules by date range (YYYY-MM-DD/YYYY-MM-DD)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully read granules from granule data operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/granules"

  /granules:
    get:
      summary: Read the entire set of granules, sorted by timestamp
      operationId: granule.read_all
      tags:
        - Granules
      description: Read the entire set of granules, sorted by timestamp
      parameters:
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
        - name: maxage
          in: query
          description: maximum age of granule since generation/acquisiton in hours
          required: false
          schema:
            type: number
        - name: date
          in: query
          description: filters returned granules by acquisition date (YYYY-MM-DD)
          required: false
          schema:
            type: string
        - name: date_range
          in: query
          description: filters returned granules by date range (YYYY-MM-DD/YYYY-MM-DD)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successfully read granule set operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/granules"

  /granules/{uuid}:
    get:
      summary: Read one granule record
      operationId: granule.read_one
      tags:
        - Granules
      description: Read one granule record
      parameters:
        - name: uuid
          in: path
          description: Granule UUID
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successfully read granule from granule set opertion
          content:
            application/json:          
              schema:
                $ref: "#/components/schemas/granule"

  /granules/{uuid}/request_highres:
    post:
      summary: Issue highres product download request to shore
      operationId: granule.request_highres
      tags:
        - Granules
      description: Issue highres product download request to shore
      parameters:
        - name: uuid
          in: path
          description: Granule UUID
          schema:
            type: string
          required: true
      responses:
        '202':
          description: Accepted
        '404':
          description: Granule not found for UUID
        '405':
          description: Method not supported by product

  /kvs:
    get:
      summary: Read the entire set of Key/Value pairs, sorted by key     
      operationId: keyvalue.read_all
      tags:
        - KeyValues
      description: Read the entire set of Key/Value pairs, sorted by key
      responses:
        '200':
          description: Read the entire set of Key/Value pairs, sorted by key
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/kvs"
    delete:
      summary: Delete all Key/Value pairs
      operationId: keyvalue.delete_all
      tags:
        - KeyValues
      description: Delete all Key/Value pairs
      responses:
        '204':
          description: Successfully deleted all Key-Value pairs

  /kvs/{key}:
    get:
      summary: Read one Key/Value pair
      operationId: keyvalue.read_one
      tags:
        - KeyValues
      description: Read one Key/Value pair
      parameters:
        - name: key
          in: path
          description: Key of the KV pair to get
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successfully read Key/Value pair
          content:
            application/json:          
              schema:
                $ref: "#/components/schemas/kv"
        '404':
          description: Not found 
    delete:
      summary: Delete one Key/Value pair
      operationId: keyvalue.delete_one
      tags:
        - KeyValues
      description: Delete one Key/Value pair
      parameters:
        - name: key
          in: path
          description: Key of the KV pair to delete
          schema:
            type: string
          required: true
      responses:
        '204':
          description: Successfully deleted the Key-Value pair
    put:
      summary: Update a Key/Value pair
      operationId: keyvalue.update_one
      tags:
        - KeyValues
      description: Update a Key/Value pair
      parameters:
        - name: key
          in: path
          description: Key of the Key/Value pair to update
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successfully updated Key/Value pair
          content:
            application/json:          
              schema:
                $ref: "#/components/schemas/kv"
        '400':
          description: Request error
        '404':
          description: Not found
    post:
      summary: Create a Key/Value pair
      operationId: keyvalue.create_one
      tags:
        - KeyValues
      description: Create a Key/Value pair
      parameters:
        - name: key
          in: path
          description: Key of the Key/Value pair to update
          schema:
            type: string
          required: true
      responses:
        '201':
          description: Successfully created Key/Value pair
        '400':
          description: Request error
      requestBody:
        content:
          application/json:          
            schema:
              $ref: "#/components/schemas/kv"

  /routes/convert:
    post:
      summary: Convert a route between formats for use in external systems
      operationId: route.convert
      tags:
        - Routes
      description: Converts a route from a source format, such as GeoJSON to a destination format, such as an RTZ.
      parameters:
        -
          name: accept
          in: header
          description: Accept header - used to specify the desired/destination data format (i.e. what to convert to)
          required: true
          schema:
            type: string
            enum:
              - 'application/geo+json'
              - 'application/rtz'
              - 'application/rtzp'
        -
          name: content-type
          in: header
          description: Content Type header - used to specify the source data format (i.e. what to convert from)
          required: true
          schema:
            type: string
            enum:
              - 'application/geo+json'
              - 'application/rtz'
              - 'application/rtzp'
      requestBody:
        description: Source input
        content:
          'application/geo+json':
            schema: {}
          'application/rtz':
            schema: {}
          'application/rtzp':
            schema: {}
        "required": true
      responses:
        '200':
          description: Successfully converted route
          content:
            'application/geo+json':
              schema:
                type: object
            'application/rtz':
              schema:
                type: string
            'application/rtzp':
              schema:
                type: string
                format: binary

components:
  schemas:
    product:
      type: object
      properties:
        # Core identification
        id:
          type: integer
          description: Id of the product
        code:
          type: string
          description: SIIS product code
        label:
          type: string
          description: product label
        attribution:
          type: string
          description: product attribution
        hemisphere:
          type: string
          description: Hemisphere of product ('N'/'S'/'')
        status:
          type: string
          description: Status of product feed, based on status of granules
          enum: [
            'offline',
            'online',
            'loading',
            'outdated',
            'error',
            'n/a',
            'hr_requested',
            'hr_pending',
            'hr_processing',
            'hr_online'
          ]

        # GeoServer configuration
        gs_layername:
          type: string
          description: Geoserver layer name
        gs_wmsendpoint:
          type: string
          description: Geoserver WMS endpoint - temporary for testing
        gs_wfsendpoint:
          type: string
          description: Geoserver WFS endpoint - temporary for testing
        gs_wmtsendpoint:
          type: string
          description: Geoserver WMTS endpoint - temporary for testing
        style:
          type: string
          description: GeoServer layer style

        # Supported formats and types
        layer_display_type:
          type: string
          description: Describes the layer display type within the app
          enum: ['static', 'imagery_collection']
        formats:
          type: array
          items:
            $ref: "#/components/schemas/format"
        srss:
          type: array
          items:
            $ref: "#/components/schemas/srs"
        types:
          type: array
          items:
            $ref: "#/components/schemas/type"

        # Display and rendering properties
        show_on_startup:
          type: boolean
          description: Show product in product list by default
        default_opacity:
          type: number
          format: float
          description: Default render opacity
        default_z:
          type: integer
          description: Default z-index / layer stacking order for map rendering
        granule_footprint_color:
          type: string
          description: Hex color for granule footprint (e.g., "#FF0000")
        iws_viewer_template:
          type: string
          description: Template URL for IWS viewer Supports placeholders {year}, {month}, {filename}
          example: "http://viewer.example.com/iwsviewer/?image=Data/{year}{month}/{filename}.jp2"

        # Legend configuration
        haslegend:
          type: boolean
          description: Does product has legend
        legend_graphic_params:
          type: string
          description: Holds GeoServer WMS request parameters for legend graphic styling

        # Time and data properties
        temporal_mode:
          type: string
          description: Describes the temporal characteristics of the layer
          enum: ['static', 'single_date', 'date_range']
        timestamps:
          type: string
          description: Array of timestamps available
        default_timeframe:
          type: integer
          description: Default time filter in hours applied on granules for app rendering
        highres_available:
          type: boolean
          description: Indicated availability of a corresponding high-resolution granule

        # Spatial properties
        geom_extent:
          type: string
          description: product footprint

        # deprecated
        render_exclusive:
          type: boolean
          description: Whether overlapping rendering of multiple active granules is allowed or exclusive render of one granule is required
          deprecated: true
        static:
          type: boolean
          description: Static background product/layer without granules?
          deprecated: true

    granule:
      type: object
      required:
        - id
      properties:
        # Core identification
        id:
          type: string
          description: Granule UUID
        productcode:
          type: string
          description: SIIS product code
        productname:
          type: string
          description: Filename of product after extraction
        timestamp:
          type: string
          format: date-time
          description: Timestamp of granule

        # Status and availability
        status:
          type: string
          description: Status of granule availability on vessel
          enum: [
            'offline',
            'online',
            'loading',
            'outdated',
            'error',
            'n/a',
            'hr_requested',
            'hr_pending',
            'hr_processing',
            'hr_online'
          ]

        # Download properties
        downloadable:
          type: integer
          description: Downloadable
        downloaded:
          type: integer
          description: Downloaded to local
        filename_dl:
          type: string
          description: Filename of product for download package
        size_dl:
          type: integer
          description: Download file size
        zipped:
          type: integer
          description: Zipped product for download

        # Timestamps for tracking
        ts_catingest:
          type: string
          format: date-time
          description: Timestamp of ingestion into shore-side catalogue
        ts_dlrequest:
          type: string
          format: date-time
          description: Timestamp of download request to shore-side
        ts_downloaded:
          type: string
          format: date-time
          description: Timestamp of finished download ship-side
        ts_gsingest:
          type: string
          format: date-time
          description: Timestamp of successful ship-side GeoServer ingest

        # Spatial properties
        geom_extent:
          type: string
          description: product footprint   
        geojson_extent:
          type: object
          description: product footprint in GeoJSON format (MultiPolygon)
          properties:
            type:
              type: string
              enum: ['MultiPolygon']
            coordinates:
              type: array
              items:
                type: array
                items:
                  type: array
                  items:
                    type: array
                    items:
                      type: number

    format:
      type: string
      description: Array of WxS types available

    srs:
      type: integer
      description: GeoServer delivery SRS
    
    type:
      type: string
      description: Array of WxS types available

    products:
      type: array
      items:
        $ref: "#/components/schemas/product"

    granules:
      type: array
      items:
        $ref: "#/components/schemas/granule"

    kv:
      type: object
      properties:
        key:
          type: string
          description: Key identifier of KV pair
        value:
          type: string
          description: Value of KV pair

    kvs:
      type: array
      items:
        $ref: "#/components/schemas/kv"


