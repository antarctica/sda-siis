# SDA Sea Ice Information System (SIIS) - Nomad integration
#
# Nomad source: https://www.nomadproject.io/docs/job-specification/job.html
job "siis-integration" {
  region = "bas"
  datacenters = ["cambridge"]
  type = "service"

  meta = {
    update_key = "${update_key}"
    AWS_ACCESS_KEY_ID = "${aws_access_key_id}"
    AWS_SECRET_ACCESS_KEY = "${aws_secret_access_key}"
    BAS_DOCKER_REGISTRY_USERNAME = "${bas_docker_registry_username}"
    BAS_DOCKER_REGISTRY_PASSWORD = "${bas_docker_registry_password}"
  }

  # Application instances
  #
  # Nomad guide: https://www.nomadproject.io/docs/job-specification/group.html
  group "app" {
    count = 1

    restart {
      attempts = 2
      interval = "30m"
      delay = "15s"
      mode = "fail"
    }

    ephemeral_disk {
      size = 200
    }

    network {
      port "postgres" {
        to = 5432
      }
      port "tomcat" {
        to = 8080
        static = 32001
      }
      port "flask" {
        to = 5000
        static = 32002
      }
      port "flask2" {
        to = 5001
        static = 32003
      }
      port "http" {
        to = 80
        static = 32004
      }
    }

    volume "gcw_default_blobstore" {
      type      = "host"
      source    = "siis_gcw_default_blobstore"
      read_only = false
    }

    # AWS CLI
    #
    # Prestart task
    #
    # Nomad guide: https://www.nomadproject.io/docs/job-specification/lifecycle
    task "siis-s3-v0" {
      lifecycle {
        hook = "prestart"
      }

      driver = "docker"

      env {
        AWS_ACCESS_KEY_ID = "$${NOMAD_META_AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY = "$${NOMAD_META_AWS_SECRET_ACCESS_KEY}"
      }

      config {
        image = "governmentpaas/awscli:latest"
        args = [
          "aws",
          "s3",
          "sync",
          "s3://siis-data-product-samples.data.bas.ac.uk/v0/",
          "$${NOMAD_ALLOC_DIR}/data/"
        ]
      }
    }

    # AWS CLI
    #
    # Prestart task
    #
    # Nomad guide: https://www.nomadproject.io/docs/job-specification/lifecycle
    task "siis-s3-v1" {
      lifecycle {
        hook = "prestart"
      }

      driver = "docker"

      env {
        AWS_ACCESS_KEY_ID = "$${NOMAD_META_AWS_ACCESS_KEY_ID}"
        AWS_SECRET_ACCESS_KEY = "$${NOMAD_META_AWS_SECRET_ACCESS_KEY}"
      }

      config {
        image = "governmentpaas/awscli:latest"
        args = [
          "aws",
          "s3",
          "sync",
          "s3://siis-data-product-samples.data.bas.ac.uk/v1/",
          "$${NOMAD_ALLOC_DIR}/data/"
        ]
      }
    }

    # DB
    #
    # Nomad guide: https://www.nomadproject.io/docs/job-specification/task.html
    task "db" {
      driver = "docker"

      env {
        POSTGRES_USER="siis"
        POSTGRES_PASSWORD="siis"
      }

      config {
        image = "postgis/postgis:12-3.0-alpine"
        volumes = [
          "../alloc/data/psql/:/docker-entrypoint-initdb.d/"
        ]
        ports = ["postgres"]
      }

      resources {
        memory = 512
      }
    }

    # GeoServer
    #
    # Nomad guide: https://www.nomadproject.io/docs/job-specification/task.html
    task "geoserver" {
      driver = "docker"

      env {
        JAVA_OPTS="-Dservice_pg_user=siis -Dservice_pg_pass=siis -Dservice_pg_host=$${NOMAD_HOST_IP_postgres} -Dservice_pg_port=$${NOMAD_HOST_PORT_postgres} -Dservice_pg_db=siis"
      }

      volume_mount = {
        volume = "gcw_default_blobstore"
        destination = "/var/local/gwc/blobstore/"
      }

      config {
        auth {
          username = "$${NOMAD_META_BAS_DOCKER_REGISTRY_USERNAME}",
          password = "$${NOMAD_META_BAS_DOCKER_REGISTRY_PASSWORD}",
          server_address = "docker-registry.data.bas.ac.uk",
        }

        image = "docker-registry.data.bas.ac.uk/magic/siis/geoserver:latest"
        volumes = [
          "../alloc/data/geoserver_extensions/:/var/local/geoserver-exts/",
          "../alloc/data/geoserver/:/var/local/geoserver/",
          "../alloc/data/raw/:/data/"
        ]
        ports = ["tomcat"]
      }

      resources {
        memory = 2048
      }
    }

    # API
    #
    # Nomad guide: https://www.nomadproject.io/docs/job-specification/task.html
    task "api" {
      driver = "docker"

      env {
        SERVICE_PG_CONN = "postgresql://siis:siis@$${NOMAD_HOST_IP_postgres}:$${NOMAD_HOST_PORT_postgres}/siis"
      }

      config {
        auth {
          username = "$${NOMAD_META_BAS_DOCKER_REGISTRY_USERNAME}",
          password = "$${NOMAD_META_BAS_DOCKER_REGISTRY_PASSWORD}",
          server_address = "docker-registry.data.bas.ac.uk",
        }

        image = "docker-registry.data.bas.ac.uk/magic/siis/deploy/api:latest"
        args = [
            "python",
            "api/api.py"
        ]
        ports = ["flask"]
      }

      resources {
        memory = 256
      }
    }

    # API (KV)
    #
    # Nomad guide: https://www.nomadproject.io/docs/job-specification/task.html
    task "api-kv" {
      driver = "docker"

      config {
        auth {
          username = "$${NOMAD_META_BAS_DOCKER_REGISTRY_USERNAME}",
          password = "$${NOMAD_META_BAS_DOCKER_REGISTRY_PASSWORD}",
          server_address = "docker-registry.data.bas.ac.uk",
        }

        image = "docker-registry.data.bas.ac.uk/magic/siis/api-kv:latest"
        args = [
            "flask",
            "run",
            "--host",
            "0.0.0.0",
            "--port",
            "5001"
        ]
        ports = ["flask2"]
      }

      resources {
        memory = 256
      }
    }

    # App
    #
    # Nomad guide: https://www.nomadproject.io/docs/job-specification/task.html
    task "app" {
      driver = "docker"

      config {
        auth {
          username = "$${NOMAD_META_BAS_DOCKER_REGISTRY_USERNAME}",
          password = "$${NOMAD_META_BAS_DOCKER_REGISTRY_PASSWORD}",
          server_address = "docker-registry.data.bas.ac.uk",
        }

        image = "docker-registry.data.bas.ac.uk/magic/siis/deploy/app:latest"
        ports = ["http"]
      }

      resources {
        memory = 255
      }
    }
  }
}
